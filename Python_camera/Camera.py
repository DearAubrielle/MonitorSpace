import cv2
import cvzone
import math
import time
import threading
import mysql.connector
from ultralytics import YOLO
from flask import Flask, request, jsonify
from linebot.v3.messaging import MessagingApi, PushMessageRequest, TextMessage
from linebot.v3.messaging.configuration import Configuration
from linebot.v3.messaging.api_client import ApiClient

# =========================
# === LINE CONFIG (‡πÄ‡∏î‡∏¥‡∏°) ===
# =========================
CHANNEL_ACCESS_TOKEN = 'KwOqh2ygwm/ZEELgTi8wcHx1ZTOnjkddJA1rzjBKRan7OezkRaJtstVGsgTYgtjD2KijQCS6aGsea7ivdDyQ+GX2uvE+pjqubAyokDi3VtPyN3KgFTmIFySsPMDiiKOmshW43V8evvJHx/ZWAw/j2wdB04t89/1O/w1cDnyilFU='
USER_ID = 'C51151f2b2a353530e69ab5c43c3fb026'

# =========================
# === DB CONFIG (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ) ==
# =========================
DB_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "",
    "database": "spacemonitor",
    "port": 3306,
}

# =========================
# === PARAM CONFIG (‡πÄ‡∏î‡∏¥‡∏°) ===
# =========================
ALERT_MODE = 3            # 1=‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡∏ï‡∏≤‡∏° cooldown, 2=‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô, 3=‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
ALERT_LIMIT = 3
ALERT_COOLDOWN = 10       # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

FALL_ASPECT_RATIO = 1.2
CONFIDENCE_THRESHOLD = 80
PADDING = 20
SKIP_FRAMES = 3

FALL_HOLD_TIME = 2.0
RAPID_CHANGE_THRESHOLD = 0.5
RAPID_CHANGE_TIME = 1.0
FALL_Y_DROP_THRESHOLD = 100

MODEL_PATH = "yolov8s.pt"
CLASSES_PATH = "classes.txt"

# =========================
# === UTIL: ‡∏™‡πà‡∏á LINE =======
# =========================
def send_line_message(message_text: str):
    configuration = Configuration(access_token=CHANNEL_ACCESS_TOKEN)
    with ApiClient(configuration) as api_client:
        messaging_api = MessagingApi(api_client)
        messaging_api.push_message(
            PushMessageRequest(
                to=USER_ID,
                messages=[TextMessage(text=message_text)]
            )
        )
    print("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÅ‡∏•‡πâ‡∏ß:", message_text)


# =========================
# === CORE DETECTOR =======
# =========================
class FallDetector:
    def __init__(self):
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏ö
        self.cap = None
        self.source = None
        self.running = False
        self.thread = None
        self.lock = threading.Lock()

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.alert_mode = ALERT_MODE
        self.alert_limit = ALERT_LIMIT
        self.alert_count = 0
        self.alert_sent = False
        self.alert_cooldown = ALERT_COOLDOWN
        self.last_alert_time = 0.0

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ß‡∏•‡∏≤/‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.prev_aspect_ratio = 0.0
        self.ratio_change_time = 0.0
        self.fall_start_time = None
        self.falling_detected = False
        self.prev_box_y1 = 0

        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™
        self.model = YOLO(MODEL_PATH)
        with open(CLASSES_PATH, 'r', encoding="utf-8") as f:
            self.classnames = f.read().splitlines()

        # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
        self.frame_count = 0

    # -------------- ‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡∏ã‡∏≠‡∏£‡πå‡∏™ --------------
    def _open_cap(self, new_source):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏™‡∏•‡∏±‡∏ö VideoCapture ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        with self.lock:
            # ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤
            if self.cap is not None:
                try:
                    self.cap.release()
                except Exception:
                    pass
                self.cap = None

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô int ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç index
            src = new_source
            if isinstance(src, str) and src.isdigit():
                src = int(src)

            self.cap = cv2.VideoCapture(src)
            if not self.cap or not self.cap.isOpened():
                self.source = None
                raise RuntimeError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ã‡∏≠‡∏£‡πå‡∏™: {new_source}")

            self.source = new_source
            print(f"üé• ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ã‡∏≠‡∏£‡πå‡∏™: {self.source}")

    def set_camera_url(self, url_or_index: str):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ URL/RTSP/‡πÑ‡∏ü‡∏•‡πå/‡πÄ‡∏•‡∏Ç index"""
        self._open_cap(url_or_index)

    def set_camera_by_device_id(self, device_id: int):
        """‡∏î‡∏∂‡∏á path_topic ‡∏à‡∏≤‡∏Å MySQL ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        conn = mysql.connector.connect(**DB_CONFIG)
        try:
            cur = conn.cursor()
            cur.execute("SELECT path_topic FROM devices WHERE id = %s", (device_id,))
            row = cur.fetchone()
            if not row:
                raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö device_id={device_id} ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á devices")
            path = row[0]
            if not path:
                raise ValueError(f"device_id={device_id} ‡πÑ‡∏°‡πà‡∏°‡∏µ path_topic")
            self._open_cap(path)
        finally:
            cur.close()
            conn.close()

    # -------------- ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡∏á‡∏ß‡∏ô --------------
    def start(self):
        if self.running:
            return
        if self.cap is None or self.source is None:
            raise RuntimeError("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ set_camera_url ‡∏´‡∏£‡∏∑‡∏≠ set_camera_by_device_id ‡∏Å‡πà‡∏≠‡∏ô")
        self.running = True
        self.thread = threading.Thread(target=self._loop, daemon=True)
        self.thread.start()
        print("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß")

    def stop(self):
        self.running = False
        if self.thread:
            self.thread.join(timeout=2.0)
            self.thread = None
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß")

    # -------------- ‡∏ß‡∏á‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å --------------
    def _loop(self):
        # reset ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
        self.alert_count = 0
        self.alert_sent = False
        self.last_alert_time = 0.0
        self.prev_aspect_ratio = 0.0
        self.ratio_change_time = 0.0
        self.fall_start_time = None
        self.falling_detected = False
        self.prev_box_y1 = 0
        self.frame_count = 0

        while self.running:
            with self.lock:
                cap_ok = (self.cap is not None and self.cap.isOpened())
            if not cap_ok:
                print("‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î/‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏á‡∏ß‡∏ô")
                break

            ret, frame = self.cap.read()
            if not ret:
                time.sleep(0.05)
                continue

            self.frame_count += 1
            if self.frame_count % SKIP_FRAMES != 0:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ 't' ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                cv2.imshow('Fall Detection', frame)
                if cv2.waitKey(1) & 0xFF == ord('t'):
                    self.running = False
                    break
                continue

            frame_h, frame_w = frame.shape[:2]
            results = self.model(frame, verbose=False)

            for info in results:
                for box in info.boxes:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    confidence = float(box.conf[0])
                    class_idx = int(box.cls[0])
                    class_name = self.classnames[class_idx] if class_idx < len(self.classnames) else str(class_idx)
                    conf_percent = math.ceil(confidence * 100)

                    if conf_percent > CONFIDENCE_THRESHOLD and class_name == 'person':
                        x1_pad = max(x1 - PADDING, 0)
                        y1_pad = max(y1 - PADDING, 0)
                        x2_pad = min(x2 + PADDING, frame_w - 1)
                        y2_pad = min(y2 + PADDING, frame_h - 1)

                        width = x2_pad - x1_pad
                        height = y2_pad - y1_pad
                        aspect_ratio = (width / height) if height > 0 else 0

                        cvzone.cornerRect(frame, [x1_pad, y1_pad, width, height], l=30, rt=6)
                        cvzone.putTextRect(frame, f'{class_name} {conf_percent}%', [x1_pad + 8, y1_pad - 12], thickness=2, scale=2)

                        current_time = time.time()
                        should_alert = False

                        # [1] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ratio ‡πÄ‡∏£‡πá‡∏ß
                        if self.prev_aspect_ratio < 1.0 and aspect_ratio > FALL_ASPECT_RATIO:
                            if current_time - self.ratio_change_time < RAPID_CHANGE_TIME and abs(aspect_ratio - self.prev_aspect_ratio) > RAPID_CHANGE_THRESHOLD:
                                cvzone.putTextRect(frame, 'Fall Detected (Rapid Change)', [x1_pad, y2_pad + 30], thickness=2, scale=2, colorR=(0, 0, 255))
                                should_alert = True

                        # [2] ‡∏•‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏¥‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô HOLD time
                        if aspect_ratio > FALL_ASPECT_RATIO:
                            if not self.falling_detected:
                                self.fall_start_time = current_time
                                self.falling_detected = True
                            elif current_time - self.fall_start_time > FALL_HOLD_TIME:
                                cvzone.putTextRect(frame, 'Fall Detected (Hold)', [x1_pad, y2_pad + 60], thickness=2, scale=2, colorR=(0, 0, 255))
                                should_alert = True
                        else:
                            self.fall_start_time = None
                            self.falling_detected = False

                        # [3] ‡∏ï‡∏Å‡∏•‡∏á‡πÄ‡∏£‡πá‡∏ß (drop)
                        if abs(self.prev_box_y1 - y1) > FALL_Y_DROP_THRESHOLD:
                            cvzone.putTextRect(frame, 'Fall Detected (Drop)', [x1_pad, y2_pad + 90], thickness=2, scale=2, colorR=(0, 0, 255))
                            should_alert = True

                        # === ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ===
                        if should_alert:
                            if self.alert_mode == 1 and (current_time - self.last_alert_time >= self.alert_cooldown):
                                send_line_message("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°! (Rapid/Hold/Drop)")
                                self.last_alert_time = current_time
                                self.alert_count += 1

                            elif self.alert_mode == 2 and self.alert_count < self.alert_limit and (current_time - self.last_alert_time >= self.alert_cooldown):
                                send_line_message("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°! (‡πÅ‡∏à‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î)")
                                self.last_alert_time = current_time
                                self.alert_count += 1

                            elif self.alert_mode == 3 and not self.alert_sent:
                                send_line_message("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°! (‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)")
                                self.alert_sent = True

                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ state
                        self.prev_aspect_ratio = aspect_ratio
                        self.ratio_change_time = current_time
                        self.prev_box_y1 = y1

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° t
            cv2.imshow('Fall Detection', frame)
            if cv2.waitKey(1) & 0xFF == ord('t'):
                self.running = False
                break

        # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î
        try:
            cv2.destroyAllWindows()
        except Exception:
            pass

    # -------------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API --------------
    def get_status(self):
        return {
            "running": self.running,
            "source": self.source,
            "alert_mode": self.alert_mode,
            "alert_limit": self.alert_limit,
            "alert_count": self.alert_count,
            "alert_sent": self.alert_sent,
            "cooldown": self.alert_cooldown,
        }


# =========================
# === Flask API ===========
# =========================
app = Flask(__name__)
detector = FallDetector()

@app.route("/start", methods=["POST"])
def api_start():
    try:
        detector.start()
        return jsonify({"ok": True, "status": detector.get_status()})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 400

@app.route("/stop", methods=["POST"])
def api_stop():
    try:
        detector.stop()
        return jsonify({"ok": True, "status": detector.get_status()})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 400

@app.route("/set_camera_id", methods=["POST"])
def api_set_camera_id():
    data = request.get_json(silent=True) or {}
    device_id = data.get("id")
    if device_id is None:
        return jsonify({"ok": False, "error": "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå 'id' (int)"}), 400
    try:
        detector.set_camera_by_device_id(int(device_id))
        return jsonify({"ok": True, "source": detector.source})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 400

@app.route("/set_camera_url", methods=["POST"])
def api_set_camera_url():
    data = request.get_json(silent=True) or {}
    url = data.get("url")
    if not url:
        return jsonify({"ok": False, "error": "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå 'url' (str) ‡πÄ‡∏ä‡πà‡∏ô '0' ‡∏´‡∏£‡∏∑‡∏≠ 'rtsp://...' ‡∏´‡∏£‡∏∑‡∏≠ 'http://...' ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå"}), 400
    try:
        detector.set_camera_url(url)
        return jsonify({"ok": True, "source": detector.source})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 400

@app.route("/status", methods=["GET"])
def api_status():
    return jsonify({"ok": True, "status": detector.get_status()})


# =========================
# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ===
# =========================
def run_detector_with_device_id(device_id: int):
    """
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡πÜ (‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å API)
    """
    detector.set_camera_by_device_id(device_id)
    detector.start()

def run_detector_with_url(url_or_index: str):
    """
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡πÜ (‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å API)
    ‡πÄ‡∏ä‡πà‡∏ô '0' ‡∏´‡∏£‡∏∑‡∏≠ 'rtsp://...' ‡∏´‡∏£‡∏∑‡∏≠ 'http://...' ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå
    """
    detector.set_camera_url(url_or_index)
    detector.start()


# =========================
# === MAIN ================
# =========================
if __name__ == "__main__":
    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á ---
    # 1) ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å device_id = 2
    # run_detector_with_device_id(2)

    # 2) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏° index 0
    run_detector_with_url("0")

    # 3) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡πá‡∏ö API ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡∏¥‡∏á API set_camera & start/stop
    app.run(host="0.0.0.0", port=5000, debug=True)

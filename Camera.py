import cv2
import numpy as np
import tensorflow as tf
import requests

LINE_NOTIFY_TOKEN = '‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà'

def send_line_notify(message):
    url = "https://notify-api.line.me/api/notify"
    headers = {"Authorization": "Bearer " + LINE_NOTIFY_TOKEN}
    payload = {"message": message}
    requests.post(url, headers=headers, data=payload)

def detect_fall(keypoints):
    # ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: 11 (left_hip), 12 (right_hip), 13 (left_knee), 14 (right_knee)
    left_hip = keypoints[11]
    right_hip = keypoints[12]
    left_knee = keypoints[13]
    right_knee = keypoints[14]

    avg_hip_y = (left_hip[0] + right_hip[0]) / 2
    avg_knee_y = (left_knee[0] + right_knee[0]) / 2

    # ‡∏ñ‡πâ‡∏≤‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡πÄ‡∏Ç‡πà‡∏≤ = ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏∞‡∏•‡πâ‡∏°
    if avg_hip_y > avg_knee_y:
        return True
    return False

# ‡πÇ‡∏´‡∏•‡∏î MoveNet Thunder
model = tf.saved_model.load("C:/Users/vittapong/Desktop/SpecialProject/MonitorSpace/Python_camera")
# cap = cv2.VideoCapture("rtsp://user:pass@IP_ADDRESS:PORT/stream")  # ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ webcam
cap = cv2.VideoCapture(0) 

fall_detected = False
while True:
    ret, frame = cap.read()
    if not ret:
        break

    img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    resized = tf.image.resize_with_pad(tf.expand_dims(img_rgb, axis=0), 256, 256)
    input_tensor = tf.cast(resized, dtype=tf.int32)

    outputs = model.signatures['serving_default'](input_tensor)
    keypoints = outputs['output_0'].numpy()[0][0]

    if detect_fall(keypoints) and not fall_detected:

        print("‡∏°‡∏µ‡∏Ñ‡∏ô‡∏•‡πâ‡∏°‡∏Ñ‡∏£‡∏±‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö‡∏ö")
        # send_line_notify("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°!")
        fall_detected = True  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cv2.imshow("Fall Detection", frame)
    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
